const express = require("express");
const { PrismaClient } = require("@prisma/client");
const authenticateAPIKey = require("../../middleware/authMiddleware");

const router = express.Router();
const prisma = new PrismaClient();

// üìå ‡¶®‡¶§‡ßÅ‡¶® Patient Appointment ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
router.post("/", authenticateAPIKey, async (req, res) => {
    const { patientName, phone, departmentId, doctorId, day } = req.body;

    if (!patientName || !phone || !departmentId || !doctorId || !day) {
        return res.status(400).json({ error: "‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü!" });
    }

    try {
        const newAppointment = await prisma.patientAppointment.create({
            data: {
                patientName,
                phone,
                departmentId,
                doctorId,
                day,
            },
        });

        res.status(201).json({
            message: "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßÅ‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
            appointment: newAppointment
        });
    } catch (error) {
        console.error("‚ùå ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
        res.status(500).json({ error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
    }
});

// üìå ‡¶∏‡¶¨ Patient Appointments ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã (Doctor & Department ‡¶®‡¶æ‡¶Æ ‡¶∏‡¶π)
router.get("/", authenticateAPIKey, async (req, res) => {
    try {
        const appointments = await prisma.patientAppointment.findMany({
            include: {
                department: { select: { name: true } }, // ‚úÖ Department Name ‡¶Ü‡¶®‡¶¨‡ßá
                doctor: { select: { name: true } }, // ‚úÖ Doctor Name ‡¶Ü‡¶®‡¶¨‡ßá
            },
            orderBy: { createdAt: "desc" }, // ‚úÖ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
        });

        // ‚úÖ ‡¶°‡¶æ‡¶ü‡¶æ‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßá ID ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
        const formattedAppointments = appointments.map(appointment => ({
            id: appointment.id,
            patientName: appointment.patientName,
            phone: appointment.phone,
            department: appointment.department?.name || "N/A", // ‚úÖ Department Name
            doctor: appointment.doctor?.name || "N/A", // ‚úÖ Doctor Name
            day: appointment.day,
            createdAt: appointment.createdAt,
        }));

        res.json({ message: "Appointments fetched successfully!", appointments: formattedAppointments });
    } catch (error) {
        console.error("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error.message);
        res.status(500).json({ error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
    }
});

// üìå ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶è‡¶ï‡¶ü‡¶ø Patient Appointment ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ
router.get("/:id", authenticateAPIKey, async (req, res) => {
    const { id } = req.params;

    try {
        const appointment = await prisma.patientAppointment.findUnique({
            where: { id },
            include: {
                department: { select: { name: true } }, // ‚úÖ Department Name ‡¶Ü‡¶®‡¶¨‡ßá
                doctor: { select: { name: true } }, // ‚úÖ Doctor Name ‡¶Ü‡¶®‡¶¨‡ßá
            },
        });

        if (!appointment) {
            return res.status(404).json({ error: "Patient appointment ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø" });
        }

        // ‚úÖ ID ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
        const formattedAppointment = {
            id: appointment.id,
            patientName: appointment.patientName,
            phone: appointment.phone,
            department: appointment.department?.name || "N/A",
            doctor: appointment.doctor?.name || "N/A",
            day: appointment.day,
            createdAt: appointment.createdAt,
        };

        res.json(formattedAppointment);
    } catch (error) {
        console.error("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error.message);
        res.status(500).json({ error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
    }
});

// üìå Patient Appointment ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
router.put("/:id", authenticateAPIKey, async (req, res) => {
    const { id } = req.params;
    const { patientName, phone, departmentId, doctorId, day } = req.body;

    try {
        // ‚úÖ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
        const existingAppointment = await prisma.patientAppointment.findUnique({
            where: { id },
        });

        if (!existingAppointment) {
            return res.status(404).json({ error: "Patient appointment ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø" });
        }

        // ‚úÖ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
        const updatedAppointment = await prisma.patientAppointment.update({
            where: { id },
            data: {
                patientName,
                phone,
                departmentId,
                doctorId,
                day,
                updatedAt: new Date(), // ‚úÖ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∏‡¶Æ‡ßü ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ
            },
        });

        res.json({
            message: "Patient appointment ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
            appointment: updatedAppointment,
        });
    } catch (error) {
        console.error("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error.message);
        res.status(500).json({ error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
    }
});

// üìå Patient Appointment ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
router.delete("/:id", authenticateAPIKey, async (req, res) => {
    const { id } = req.params;

    try {
        // ‚úÖ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
        const existingAppointment = await prisma.patientAppointment.findUnique({
            where: { id },
        });

        if (!existingAppointment) {
            return res.status(404).json({ error: "Patient appointment ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø" });
        }

        await prisma.patientAppointment.delete({ where: { id } });

        res.json({ message: "Patient appointment ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
    } catch (error) {
        console.error("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error.message);
        res.status(500).json({ error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" });
    }
});

module.exports = router;
