// ==========================
// PRISMA CONFIGURATION
// ==========================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


// ==========================
// User MODEL
// ==========================
// model User {
//   id            String   @id @default(uuid()) // Unique user ID
//   name          String   // User's Full Name
//   mobile        String   @unique // Mobile number (Used for login)
//   profilePhoto  String?  // Optional Profile Picture
//   username      String?  @unique // Optional Username
//   createdAt     DateTime @default(now())
// }

model OTP {
  id          String   @id @default(uuid())
  mobile      String   @unique // OTP sent to this number
  otp         String   // OTP Code
  expiresAt   DateTime // Expiry time (5 minutes)
  isUsed      Boolean  @default(false)
}


model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now()) @db.Timestamp(6)
}



// ==========================
// DOCTOR MODEL
// ==========================


model Doctor {
  id          String   @id @default(uuid())
  email       String   @unique
  slug        String?   @unique
  icon        String?  // Profile photo path
  translations Json
  memberships Membership[]
  awards      Award[]
  treatments  Treatment[]
  conditions  Condition[]
  schedule    Schedule[]
  faqs        FAQ[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]  // ✅ Fix: Use lowercase 'appointments'
}



// ==========================
// DEPARTMENT MODEL
// ==========================

model Department {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  translations  Json
  icon          String?
  slug          String?  // Add the slug field if it's missing
}




// ==========================
// APPOINTMENT MODEL
// ==========================

model Appointment {
  id                String         @id @default(uuid())
  doctorId          String
  doctorName        String
  patientId         String
  patientName       String
  mobileNumber      String
  scheduleId        String?
  serialNumber      Int?
  weight            Float?
  age               Int?
  bloodGroup        BloodGroup?
  reference         String?
  consultationFee   Float?
  paymentMethod     PaymentMethod?
  reason            String?
  address           String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  schedule          Schedule?      @relation(fields: [scheduleId], references: [id])
  doctor            Doctor         @relation(fields: [doctorId], references: [id])
  patient           Patient        @relation(fields: [patientId], references: [id])

  User User[]
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum PaymentMethod {
  CASH
  BKASH
  NAGAD
  ROCKET
  BANK
}



// ==========================
// PATIENT MODEL
// ==========================

// model Patient { 
//   id          String  @id @default(uuid())
//   name        String
//   phoneNumber String
//   email       String  @unique
//   gender      String
//   bloodGroup  String
//   dateOfBirth DateTime
//   age         String
//   weight      String
//   image       String  // URL of the image
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   appointments Appointment[]
// }

model User {
  id            String      @id @default(uuid())
  name          String
  mobile        String      @unique
  email         String?
  profilePhoto  String?
  role          String      @default("user")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  patients      Patient[]
  appointments  Appointment[]
}

model Patient { 
  id            String      @id @default(uuid())
  name          String
  phoneNumber   String
  email         String?     @unique
  gender        String?
  bloodGroup    String?
  dateOfBirth   DateTime?
  age           String?
  weight        String?
  height        String?
  image         String?     // URL or path of the image
  medicalHistory String?
  
  // Relations
  userId        String      // User who created/owns this patient
  user          User        @relation(fields: [userId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  appointments  Appointment[]
}
// ==========================
// MEMBERSHIP MODEL
// ==========================

model Membership {
  id        String @id @default(uuid())
  doctorId  String
  name      Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// AWARD MODEL
// ==========================

model Award {
  id        String @id @default(uuid())
  doctorId  String
  title     Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// TREATMENT MODEL
// ==========================

model Treatment {
  id        String @id @default(uuid())
  doctorId  String
  name      Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// CONDITION MODEL
// ==========================

model Condition {
  id        String @id @default(uuid())
  doctorId  String
  name      Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// SCHEDULE MODEL
// ==========================

model Schedule {
  id          String       @id @default(uuid())
  day         String       // উদাহরণ: "Saturday"
  startTime   String       // উদাহরণ: "09:00"
  endTime     String       // উদাহরণ: "13:00"
  maxPatients Int          @default(50)
  doctorId    String
  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  
  // Relation with time slots
  timeSlots   TimeSlot[]

  appointments Appointment[]  // ✅ Fix: Use lowercase 'appointments'
}

model TimeSlot {
  id         String   @id @default(uuid())
  scheduleId String
  start      String
  end        String
  isBooked   Boolean  @default(false)
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
}




// ==========================
// FAQ MODEL
// ==========================

model FAQ {
  id       String @id @default(uuid())
  doctorId String
  question Json
  answer   Json
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// ENUMS
// ==========================

enum ConsultationType {
  PHYSICAL
  VIDEO_CALL
}

// ==========================
// BLOG MODEL
// ==========================

model Blog {
  id              String   @id @default(uuid())
  translations    Json
  image           String?  // Stores the uploaded image filename
  categoryId   String?   // Make it optional and match the type with Category.id
  categoryName String? // Make it optional
  category        Category? @relation(fields: [categoryId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Category Category[] @relation("BlogCategories")
}

// ==========================
// CATEGORY MODEL
// ==========================

model Category {
  id           String  @id @default(uuid())
  translations Json    @default("{}") 
  updatedAt    DateTime @updatedAt @default(now()) // ✅ নতুন ডিফল্ট ভ্যালু দেওয়া হলো
  blogs        Blog[]   @relation("BlogCategories")

  Blog Blog[]
}



// ==========================
// Review MODEL
// ==========================
model Review {
  id         Int     @id @default(autoincrement())
  name       String
  role       String  // ✅ Make sure this exists
  image      String?
  rating     Int
  reviewText String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ==========================
// Home Page MODEL
// ==========================


model Homepage {
  
  id                     Int                          @id @default(1)
  
  heroSection            HeroSection?
  featuresSection        FeaturesSection?
  aboutSection           AboutSection?
  appointmentSection     AppointmentSection?
  whyChooseUsSection     WhyChooseUsSection?
  downloadAppSection     DownloadAppSection?
  appointmentProcess     AppointmentProcessSection?
  
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
}

model HeroSection {
  id            Int    @id @default(autoincrement())
 
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model FeaturesSection {
  id            Int    @id @default(autoincrement())
 
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model AboutSection {
  id            Int    @id @default(autoincrement())

  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model AppointmentSection {
  id            Int    @id @default(autoincrement())

  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model WhyChooseUsSection {
  id            Int    @id @default(autoincrement())
  
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model DownloadAppSection {
  id            Int    @id @default(autoincrement())

  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model AppointmentProcessSection {
  id            Int    @id @default(autoincrement())
 
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

// ==========================
// Add Page MODEL
// ==========================
model Page {
  id            Int    @id @default(autoincrement())
  name          String?  // ✅ Ensure this field exists
  slug          String @unique
  translations  Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model PatientAppointment {
  id             Int      @id @default(autoincrement())
  patientName    String
  phone          String
  day            String
  departmentName String   // Storing the department name directly
  doctorName     String   // Storing the doctor name directly
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
