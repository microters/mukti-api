// ==========================
// PRISMA CONFIGURATION
// ==========================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


// ==========================
// User MODEL
// ==========================
model User {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  phoneNumber String
  password    String
  role        String @default("user")
  isVerified  Boolean @default(false)
  createdAt   DateTime @default(now())
}

model OTP {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  name      String
  phoneNumber String
  password  String
  role        String @default("user")
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now()) @db.Timestamp(6)
}



// ==========================
// DOCTOR MODEL
// ==========================


model Doctor {
  id          String   @id @default(uuid())
  email       String   @unique
  slug        String?   @unique
  icon        String?  // Profile photo path
  translations Json
  memberships Membership[]
  awards      Award[]
  treatments  Treatment[]
  conditions  Condition[]
  schedule    Schedule[]
  faqs        FAQ[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Appointment Appointment[]
}


// ==========================
// DEPARTMENT MODEL
// ==========================

model Department {
  id              String   @id @default(uuid()) // Generates UUID automatically
  translations    Json
  icon           String?  // Stores the icon file path (nullable)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}




// ==========================
// APPOINTMENT MODEL
// ==========================

model Appointment {
  id                String    @id @default(uuid())
  doctorId          String
  patientId         String
  scheduleId        String?   // নতুন ফিল্ড, যদি শিডিউল থাকে
  serialNumber      Int?
  consultationFee   Float
  vat               Float
  promoCode         String?
  consultationType  ConsultationType
  paymentMethod     PaymentMethod
  directorReference String?
  status            String    @default("Pending")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  doctor   Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient  Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  schedule Schedule? @relation(fields: [scheduleId], references: [id])
}




// ==========================
// PATIENT MODEL
// ==========================

model Patient { 
  id          String  @id @default(uuid())
  name        String
  phoneNumber String
  email       String  @unique
  gender      String
  bloodGroup  String
  dateOfBirth DateTime
  age         String
  weight      String
  image       String  // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
}


// ==========================
// MEMBERSHIP MODEL
// ==========================

model Membership {
  id        String @id @default(uuid())
  doctorId  String
  name      Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// AWARD MODEL
// ==========================

model Award {
  id        String @id @default(uuid())
  doctorId  String
  title     Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// TREATMENT MODEL
// ==========================

model Treatment {
  id        String @id @default(uuid())
  doctorId  String
  name      Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// CONDITION MODEL
// ==========================

model Condition {
  id        String @id @default(uuid())
  doctorId  String
  name      Json
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// SCHEDULE MODEL
// ==========================

model Schedule {
  id          String       @id @default(uuid())
  day         String       // উদাহরণ: "Saturday"
  startTime   String       // উদাহরণ: "09:00"
  endTime     String       // উদাহরণ: "13:00"
  maxPatients Int          @default(50)
  doctorId    String
  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  // Relation with time slots
  timeSlots   TimeSlot[]

  Appointment Appointment[]
}
model TimeSlot {
  id         String   @id @default(uuid())
  scheduleId String
  start      String
  end        String
  isBooked   Boolean  @default(false)
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
}




// ==========================
// FAQ MODEL
// ==========================

model FAQ {
  id       String @id @default(uuid())
  doctorId String
  question Json
  answer   Json
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

// ==========================
// ENUMS
// ==========================

enum ConsultationType {
  PHYSICAL
  VIDEO_CALL
}

enum PaymentMethod {
  BKASH
  BANK
  REFERENCE
}

// ==========================
// BLOG MODEL
// ==========================

model Blog {
  id              String   @id @default(uuid())
  translations     Json
  image           String?  // Stores the uploaded image filename
  categories      Category[] @relation("BlogCategories")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ==========================
// CATEGORY MODEL
// ==========================

model Category {
  id           String  @id @default(uuid())
  translations Json    @default("{}") 
  updatedAt    DateTime @updatedAt @default(now()) // ✅ নতুন ডিফল্ট ভ্যালু দেওয়া হলো
  blogs        Blog[]   @relation("BlogCategories")
}



// ==========================
// Review MODEL
// ==========================
model Review {
  id         Int     @id @default(autoincrement())
  name       String
  role       String  // ✅ Make sure this exists
  image      String?
  rating     Int
  reviewText String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ==========================
// Home Page MODEL
// ==========================


model Homepage {
  
  id                     Int                          @id @default(1)
  
  heroSection            HeroSection?
  featuresSection        FeaturesSection?
  aboutSection           AboutSection?
  appointmentSection     AppointmentSection?
  whyChooseUsSection     WhyChooseUsSection?
  downloadAppSection     DownloadAppSection?
  appointmentProcess     AppointmentProcessSection?
  
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
}

model HeroSection {
  id            Int    @id @default(autoincrement())
 
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model FeaturesSection {
  id            Int    @id @default(autoincrement())
 
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model AboutSection {
  id            Int    @id @default(autoincrement())

  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model AppointmentSection {
  id            Int    @id @default(autoincrement())

  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model WhyChooseUsSection {
  id            Int    @id @default(autoincrement())
  
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model DownloadAppSection {
  id            Int    @id @default(autoincrement())

  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

model AppointmentProcessSection {
  id            Int    @id @default(autoincrement())
 
  translations  Json
  
  homepageId    Int    @unique
  homepage      Homepage   @relation(fields: [homepageId], references: [id])
}

